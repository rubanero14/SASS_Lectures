// Importing partials into the main.scss file, notice that no undesrcore needed or url() method needed to import partials, can omit the _ and .scss extension
@import './resets';
@import './variables';
@import './functions';
@import './mixin';

// Just call the nam of the variables directly to the scss properties to use it, example as below
body {
    background: $background-color;
    color: $text-color;
    margin: 50px auto;
    display: inline-block;
    font-family: $font-family;

    // Importing and assigning theme mixin here and assiging to the light class and passed the variables as params as boolean values
    &.light {
        @include theme($dark-theme: true);
    }
}

.main {
    // to use the mixin declared in partials or here, simply use the syntax @include and followed by the name of the mixin, with passing params required by the mixin
    @include flexCenter(column);

    // in CSS we need calc() method, but in SCSS we dont need that method to perform Math operations
    // Noted: In SCSS we can only perform math operation of the same type, like 80%- 50%, but we can't do 80% - 30px, we can override this using CSS's calc() method here
    // which works fine on SCSS should that need arises
    width: 100% - 10%;
    margin: 0 auto;
    
    @include mobileResponsive {
        width: 80%;
    }

    // & or ampersand can be replaced with the word .main, its a shorthand syntax supported by SCSS for BEM based CSS convention
    // wrapping the & or ampersand with #{}, ensures .main__paragraph is considered as child element and inherits all the .main's styles
    #{&}__title {
        font-weight: weight(bold);
        text-align: text-alignment(start);
        // to use the mixin declared in partials or here, simply use the syntax @include and followed by the name of the mixin
        @include marginBottom;

        // adding mobileResponsive mixin for mobile view on the element
        @include mobileResponsive {
            text-align: text-alignment(start);
        }

        &:hover {
            color: $highlight-color-blue;
        }
    }
    
    #{&}__paragraph1 {
        // We are reusing the weight() function declared in _functions.scss file and passing the param as declared in _variables.scss
        font-weight: weight(light);
        @include marginBottom;

        // adding mobileResponsive mixin for mobile view on the element
        @include mobileResponsive {
            text-align: text-alignment(start);
        }

        &:hover {
            color: $highlight-color-blue;
        }
    }

    // Extend is an extension if styles inherits from one element to another, as you see using @extend followed by the class name we gonna extend,
    // for example as below, we are re-using main__paragraph1's styles to main__paragraph2 and so on, but we also can add more style into extended class where it takes priority
    // over the inherited class
    #{&}__paragraph2, #{&}__paragraph3 {
        @extend .main__paragraph1;

        // this hover class has different styling from inherited styling, and it takes priority over the inherited ones
        &:hover {
            color: $highlight-color-pink-hover;
        }
    }
}

.footer {
    text-align: text-alignment(center);
    margin: 50px auto 0px auto;
    width: 100%;
    padding: 30px 0;

    .sass-link {
        text-decoration: none;
    }

    button {
        cursor: pointer;
        background: $highlight-color-pink;
        color: #fff;
        font-size: inherit;
        padding: 5px 10px;
        border-radius: 4px;
        border: $highlight-color-pink;

        &:hover {
            background: $highlight-color-pink-hover;
        }
    }
}
